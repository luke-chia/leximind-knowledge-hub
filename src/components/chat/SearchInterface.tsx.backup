import { useState, useEffect } from 'react'
import { Send, Mic, Loader2, Filter } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card } from '@/components/ui/card'
import { Drawer, DrawerContent, DrawerTrigger } from '@/components/ui/drawer'
import { Checkbox } from '@/components/ui/checkbox'
import { Badge } from '@/components/ui/badge'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'

interface SearchInterfaceProps {
  onSearch: (searchParams: {
    query: string
    filters?: {
      area: string[]
      categoria: string[]
      fuente: string[]
      tags: string[]
    }
  }) => void
  isLoading?: boolean
  minimal?: boolean
}

interface FilterPanelProps {
  filters: {
    area: string[]
    categoria: string[]
    fuente: string[]
    tags: string[]
  }
  onFiltersChange: (filters: {
    area: string[]
    categoria: string[]
    fuente: string[]
    tags: string[]
  }) => void
  onClose?: () => void
}

// Componente FilterPanel separado para reutilizaci√≥n
function FilterPanel({ filters, onFiltersChange, onClose }: FilterPanelProps) {
  const [localTagInput, setLocalTagInput] = useState('')

  const filterOptions = {
    area: ['Compliance', 'Core', 'TI'],
    categoria: ['Normativa', 'Operativo', 'T√©cnico'],
    fuente: ['CNBV', 'IFRS9', 'Manual Interno'],
    tags: ['PLD', 'Desarrollo Seguro', 'Reservas IFRS9', 'KYC', 'AML', 'Riesgo Operacional']
  }

  const handleAreaChange = (value: string) => {
    const updatedArea = filters.area.includes(value)
      ? filters.area.filter(v => v !== value)
      : [...filters.area, value]
    onFiltersChange({ ...filters, area: updatedArea })
  }

  const handleCheckbox = (key: 'categoria' | 'fuente', value: string) => {
    const exists = filters[key].includes(value)
    const updated = exists
      ? filters[key].filter((v) => v !== value)
      : [...filters[key], value]
    onFiltersChange({ ...filters, [key]: updated })
  }

  const handleTagChange = (value: string) => {
    if (!filters.tags.includes(value)) {
      onFiltersChange({ ...filters, tags: [...filters.tags, value] })
    }
  }

  const removeTag = (tagToRemove: string) => {
    onFiltersChange({
      ...filters,
      tags: filters.tags.filter(t => t !== tagToRemove)
    })
  }

  const clearAllFilters = () => {
    onFiltersChange({ area: [], categoria: [], fuente: [], tags: [] })
  }

  return (
    <div className="max-w-sm w-full p-6 bg-background">
      <div className="font-bold text-lg mb-4">üîß Filtros de b√∫squeda</div>

      {/* √Årea - ComboBox */}
      <div className="mb-4">
        <div className="font-semibold mb-2">√Årea</div>
        <Select onValueChange={handleAreaChange}>
          <SelectTrigger className="w-full">
            <SelectValue placeholder="Seleccionar √°rea" />
          </SelectTrigger>
          <SelectContent>
            {filterOptions.area.map((opt) => (
              <SelectItem key={opt} value={opt}>{opt}</SelectItem>
            ))}
          </SelectContent>
        </Select>
        {/* Mostrar √°reas seleccionadas */}
        <div className="flex gap-1 flex-wrap mt-2">
          {filters.area.map((area) => (
            <Badge key={area} className="bg-banking-primary/20 text-banking-primary px-2 py-1">
              {area}
              <button
                type="button"
                className="ml-1 text-xs hover:text-red-400"
                onClick={() => handleAreaChange(area)}
              >‚úï</button>
            </Badge>
          ))}
        </div>
      </div>

      {/* Categor√≠a - Checkboxes */}
      <div className="mb-4">
        <div className="font-semibold mb-2">Categor√≠a</div>
        <div className="flex flex-col gap-2">
          {filterOptions.categoria.map((opt) => (
            <label key={opt} className="flex items-center gap-2">
              <Checkbox
                checked={filters.categoria.includes(opt)}
                onCheckedChange={() => handleCheckbox('categoria', opt)}
              />
              <span className="text-sm">{opt}</span>
            </label>
          ))}
        </div>
      </div>

      {/* Fuente / Regulador - Checkboxes */}
      <div className="mb-4">
        <div className="font-semibold mb-2">Fuente / Regulador</div>
        <div className="flex flex-col gap-2">
          {filterOptions.fuente.map((opt) => (
            <label key={opt} className="flex items-center gap-2">
              <Checkbox
                checked={filters.fuente.includes(opt)}
                onCheckedChange={() => handleCheckbox('fuente', opt)}
              />
              <span className="text-sm">{opt}</span>
            </label>
          ))}
        </div>
      </div>

      {/* Tags - ComboBox */}
      <div className="mb-4">
        <div className="font-semibold mb-2">Tags</div>
        <Select onValueChange={handleTagChange}>
          <SelectTrigger className="w-full">
            <SelectValue placeholder="Agregar tag" />
          </SelectTrigger>
          <SelectContent>
            {filterOptions.tags.filter(tag => !filters.tags.includes(tag)).map((tag) => (
              <SelectItem key={tag} value={tag}>{tag}</SelectItem>
            ))}
          </SelectContent>
        </Select>
        {/* Mostrar tags seleccionados */}
        <div className="flex gap-1 flex-wrap mt-2">
          {filters.tags.map((tag) => (
            <Badge key={tag} className="bg-banking-primary text-white px-2 py-1">
              {tag}
              <button
                type="button"
                className="ml-1 text-xs text-white hover:text-red-400"
                onClick={() => removeTag(tag)}
              >‚úï</button>
            </Badge>
          ))}
        </div>
      </div>

      {/* Botones de acci√≥n */}
      <div className="flex gap-4 mt-6">
        <Button variant="default" onClick={onClose}>
          Aplicar Filtros
        </Button>
        <Button variant="ghost" onClick={clearAllFilters}>
          Limpiar Todo
        </Button>
      </div>
    </div>
  )
}

const placeholderTexts = [
  'Ask me what you need...',
  '¬øCu√°les son los niveles de las cuentas de ahorro?',
  'Expl√≠came los estandares de la base de datos del Core Banking',
  '¬øC√≥mo se dan de alta los Clientes en SAFI?',
  'Explicame el Proceso de Onbarding Digital en la App',
  'Como y donde se ejecutan los cierres del periodo contables',
  'Cuantas etapas existen de acuerdo a IFRS9 y como funcionan',
  'Cuales son las obligaciones de la mesa de control en el otorgamiento de creditos ',
]

export function SearchInterface({
  onSearch,
  isLoading = false,
  minimal = false,
}: SearchInterfaceProps) {
  const [query, setQuery] = useState('')
  const [isListening, setIsListening] = useState(false)
  const [currentPlaceholder, setCurrentPlaceholder] = useState(0)
  const [displayedText, setDisplayedText] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  // Filtros y chips
  const [drawerOpen, setDrawerOpen] = useState(false)
  const [filters, setFilters] = useState({
    area: [] as string[],
    categoria: [] as string[],
    fuente: [] as string[],
    tags: [] as string[],
  })
  const [activeChips, setActiveChips] = useState<
    Array<{ key: string; value: string }>
  >([])

  // Typing animation effect
  useEffect(() => {
    if (!query) {
      const currentText = placeholderTexts[currentPlaceholder]
      setIsTyping(true)
      setDisplayedText('')

      let index = 0
      const typeText = () => {
        if (index <= currentText.length) {
          setDisplayedText(currentText.slice(0, index))
          index++
          setTimeout(typeText, 50 + Math.random() * 50) // Random typing speed
        } else {
          setIsTyping(false)
          // Wait before starting next text
          setTimeout(() => {
            setCurrentPlaceholder(
              (prev) => (prev + 1) % placeholderTexts.length
            )
          }, 2000)
        }
      }

      const timeout = setTimeout(typeText, 500)
      return () => clearTimeout(timeout)
    }
  }, [currentPlaceholder, query])

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (query.trim() && !isLoading) {
      // Enviar query y filtros
      onSearch({ query: query.trim(), filters })
      setQuery('')
    }
  }

  // Actualizar chips activos cuando cambian los filtros
  useEffect(() => {
    const chips: Array<{ key: string; value: string }> = []
    Object.entries(filters).forEach(([key, values]) => {
      if (Array.isArray(values)) {
        values.forEach((value) => {
          chips.push({ key, value })
        })
      }
    })
    setActiveChips(chips)
  }, [filters])

  const handleVoiceInput = () => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition =
        window.webkitSpeechRecognition || window.SpeechRecognition
      const recognition = new SpeechRecognition()

      recognition.continuous = false
      recognition.interimResults = false
      recognition.lang = 'es-ES'

      recognition.onstart = () => {
        setIsListening(true)
      }

      recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript
        setQuery(transcript)
        setIsListening(false)
      }

      recognition.onerror = () => {
        setIsListening(false)
      }

      recognition.onend = () => {
        setIsListening(false)
      }

      recognition.start()
    }
  }

  // If minimal mode, show only the input
  if (minimal) {
    return (
      <div className="w-full">
        <form onSubmit={handleSubmit} className="relative">
          <Input
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            placeholder={displayedText + (isTyping ? '|' : '')}
            className="input-banking h-12 text-base pr-24 pl-4 rounded-xl"
            disabled={isLoading}
          />

          {/* Voice input button */}
          <Button
            type="button"
            variant="ghost"
            size="icon"
            className="absolute right-14 top-1/2 -translate-y-1/2 h-8 w-8 text-muted-foreground hover:text-banking-primary"
            onClick={handleVoiceInput}
            disabled={isLoading || isListening}
          >
            {isListening ? (
              <div className="h-4 w-4 rounded-full bg-red-500 animate-pulse" />
            ) : (
              <Mic className="h-4 w-4" />
            )}
          </Button>

          {/* Filtro Drawer Trigger */}
          <Drawer open={drawerOpen} onOpenChange={setDrawerOpen}>
            <DrawerTrigger asChild>
              <Button
                type="button"
                variant="ghost"
                size="icon"
                className="absolute right-24 top-1/2 -translate-y-1/2 h-8 w-8 text-muted-foreground hover:text-banking-primary"
                onClick={() => setDrawerOpen(true)}
              >
                <Filter className="h-4 w-4" />
              </Button>
            </DrawerTrigger>
            <DrawerContent className="max-w-sm w-full p-6 bg-background">
              <div className="font-bold text-lg mb-4">
                üîß Filtros de b√∫squeda
              </div>
              {/* √Årea */}
              <div className="mb-4">
                <div className="font-semibold mb-2">√Årea</div>
                <div className="flex gap-4">
                  {filterOptions.area.map((opt) => (
                    <label key={opt} className="flex items-center gap-2">
                      <Checkbox
                        checked={filters.area.includes(opt)}
                        onCheckedChange={() => handleCheckbox('area', opt)}
                      />
                      {opt}
                    </label>
                  ))}
                </div>
              </div>
              {/* Categor√≠a */}
              <div className="mb-4">
                <div className="font-semibold mb-2">Categor√≠a</div>
                <div className="flex gap-4">
                  {filterOptions.categoria.map((opt) => (
                    <label key={opt} className="flex items-center gap-2">
                      <Checkbox
                        checked={filters.categoria.includes(opt)}
                        onCheckedChange={() => handleCheckbox('categoria', opt)}
                      />
                      {opt}
                    </label>
                  ))}
                </div>
              </div>
              {/* Fuente / Regulador */}
              <div className="mb-4">
                <div className="font-semibold mb-2">Fuente / Regulador</div>
                <div className="flex gap-4">
                  {filterOptions.fuente.map((opt) => (
                    <label key={opt} className="flex items-center gap-2">
                      <Checkbox
                        checked={filters.fuente.includes(opt)}
                        onCheckedChange={() => handleCheckbox('fuente', opt)}
                      />
                      {opt}
                    </label>
                  ))}
                </div>
              </div>
              {/* A√±o / Vigencia */}
              <div className="mb-4">
                <div className="font-semibold mb-2">A√±o / Vigencia</div>
                <div className="flex gap-4">
                  {filterOptions.anio.map((opt) => (
                    <label key={opt} className="flex items-center gap-2">
                      <Checkbox
                        checked={filters.anio.includes(opt)}
                        onCheckedChange={() => handleCheckbox('anio', opt)}
                      />
                      {opt}
                    </label>
                  ))}
                </div>
              </div>
              {/* Tags din√°micos */}
              <div className="mb-4">
                <div className="font-semibold mb-2">
                  Tags (etiquetas libres)
                </div>
                <form
                  onSubmit={(e) => {
                    e.preventDefault()
                    if (
                      tagInput.trim() &&
                      !filters.tags.includes(tagInput.trim())
                    ) {
                      setFilters((prev) => ({
                        ...prev,
                        tags: [...prev.tags, tagInput.trim()],
                      }))
                      setTagInput('')
                    }
                  }}
                  className="flex gap-2 mb-2"
                >
                  <Input
                    value={tagInput}
                    onChange={(e) => setTagInput(e.target.value)}
                    placeholder="Agregar Tag"
                    className="w-full"
                  />
                  <Button type="submit" size="sm" variant="secondary">
                    +
                  </Button>
                </form>
                <div className="flex gap-2 flex-wrap">
                  {filters.tags.map((tag, idx) => (
                    <Badge
                      key={idx}
                      className="bg-banking-primary text-white px-2 py-1 flex items-center gap-1"
                    >
                      {tag}
                      <button
                        type="button"
                        className="ml-1 text-xs text-white hover:text-red-400"
                        onClick={() =>
                          setFilters((prev) => ({
                            ...prev,
                            tags: prev.tags.filter((t) => t !== tag),
                          }))
                        }
                      >
                        ‚úï
                      </button>
                    </Badge>
                  ))}
                </div>
              </div>
              <div className="flex gap-4 mt-6">
                <Button variant="default" onClick={() => setDrawerOpen(false)}>
                  Aplicar Filtros
                </Button>
                <Button
                  variant="ghost"
                  onClick={() =>
                    setFilters({
                      area: [],
                      categoria: [],
                      fuente: [],
                      anio: [],
                      tags: [],
                    })
                  }
                >
                  Limpiar Todo
                </Button>
              </div>
            </DrawerContent>
          </Drawer>

          {/* Send button */}
          <Button
            type="submit"
            size="icon"
            className="absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8 btn-banking-primary rounded-lg"
            disabled={!query.trim() || isLoading}
          >
            {isLoading ? (
              <Loader2 className="h-4 w-4 animate-spin" />
            ) : (
              <Send className="h-4 w-4" />
            )}
          </Button>
        </form>
        {/* Chips de filtros activos */}
        {activeChips.length > 0 && (
          <div className="flex flex-wrap gap-2 mt-2">
            {activeChips.map((chip, idx) => (
              <Badge
                key={idx}
                className="bg-banking-primary text-white px-3 py-1 flex items-center gap-1"
              >
                {chip.key}: {chip.value}
                <button
                  type="button"
                  className="ml-1 text-xs text-white hover:text-red-400"
                  onClick={() => {
                    setActiveChips(activeChips.filter((_, i) => i !== idx))
                    setFilters((prev) => ({
                      ...prev,
                      [chip.key]: prev[chip.key].filter(
                        (v: string) => v !== chip.value
                      ),
                    }))
                  }}
                >
                  ‚úï
                </button>
              </Badge>
            ))}
          </div>
        )}
      </div>
    )
  }

  return (
    <div className="w-full max-w-4xl mx-auto px-6">
      {/* Main greeting */}
      <div className="text-center mb-12 animate-fade-in">
        <h1 className="text-4xl md:text-5xl font-bold text-foreground mb-4">
          What do you want to consult today...?
        </h1>
        <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
          Ask me about regulatory laws, compliance manuals, operational
          procedures, or any banking documentation you need help with.
        </p>
      </div>

      {/* Search interface */}
      <Card className="card-banking p-6 animate-slide-in">
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="relative">
            <Input
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              placeholder={displayedText + (isTyping ? '|' : '')}
              className="input-banking h-14 text-lg pr-32 pl-6 rounded-xl"
              disabled={isLoading}
            />

            {/* Voice input button */}
            <Button
              type="button"
              variant="ghost"
              size="icon"
              className="absolute right-24 top-1/2 -translate-y-1/2 h-10 w-10 text-muted-foreground hover:text-banking-primary"
              onClick={handleVoiceInput}
              disabled={isLoading || isListening}
            >
              {isListening ? (
                <div className="h-5 w-5 rounded-full bg-red-500 animate-pulse" />
              ) : (
                <Mic className="h-5 w-5" />
              )}
            </Button>

            {/* Filtro Drawer Trigger */}
            <Drawer open={drawerOpen} onOpenChange={setDrawerOpen}>
              <DrawerTrigger asChild>
                <Button
                  type="button"
                  variant="ghost"
                  size="icon"
                  className="absolute right-16 top-1/2 -translate-y-1/2 h-10 w-10 text-muted-foreground hover:text-banking-primary"
                  onClick={() => setDrawerOpen(true)}
                >
                  <Filter className="h-5 w-5" />
                </Button>
              </DrawerTrigger>
              <DrawerContent className="max-w-sm w-full p-6 bg-background">
                <div className="font-bold text-lg mb-4">
                  üîß Filtros de b√∫squeda
                </div>
                {/* Secciones de filtros aqu√≠ */}
                <div className="mb-4">
                  <div className="font-semibold mb-2">√Årea</div>
                  <Checkbox /> Compliance
                  <Checkbox /> Core
                  <Checkbox /> TI
                </div>
                <div className="mb-4">
                  <div className="font-semibold mb-2">Categor√≠a</div>
                  <Checkbox /> Normativa
                  <Checkbox /> Operativo
                  <Checkbox /> T√©cnico
                </div>
                <div className="mb-4">
                  <div className="font-semibold mb-2">Fuente / Regulador</div>
                  <Checkbox /> CNBV
                  <Checkbox /> IFRS9
                  <Checkbox /> Manual Interno
                </div>
                <div className="mb-4">
                  <div className="font-semibold mb-2">A√±o / Vigencia</div>
                  <Checkbox /> 2023
                  <Checkbox /> 2024
                  <Checkbox /> 2025
                </div>
                <div className="mb-4">
                  <div className="font-semibold mb-2">
                    Tags (etiquetas libres)
                  </div>
                  <Input placeholder="Agregar Tag" className="mb-2" />
                  <div className="flex gap-2 flex-wrap">
                    {/* Aqu√≠ se mostrar√°n los tags din√°micos */}
                  </div>
                </div>
                <div className="flex gap-4 mt-6">
                  <Button variant="default">Aplicar Filtros</Button>
                  <Button variant="ghost">Limpiar Todo</Button>
                </div>
              </DrawerContent>
            </Drawer>

            {/* Send button */}
            <Button
              type="submit"
              size="icon"
              className="absolute right-2 top-1/2 -translate-y-1/2 h-10 w-10 btn-banking-primary rounded-lg"
              disabled={!query.trim() || isLoading}
            >
              {isLoading ? (
                <Loader2 className="h-5 w-5 animate-spin" />
              ) : (
                <Send className="h-5 w-5" />
              )}
            </Button>
          </div>
        </form>
      </Card>

      {/* Chips de filtros activos */}
      {activeChips.length > 0 && (
        <div className="flex flex-wrap gap-2 mt-4">
          {activeChips.map((chip, idx) => (
            <Badge
              key={idx}
              className="bg-banking-primary text-white px-3 py-1 flex items-center gap-1"
            >
              {chip.key === 'tags'
                ? chip.value
                : `${chip.key.charAt(0).toUpperCase() + chip.key.slice(1)}: ${
                    chip.value
                  }`}
              <button
                type="button"
                className="ml-1 text-xs text-white hover:text-red-400"
                onClick={() => {
                  setFilters((prev) => ({
                    ...prev,
                    [chip.key]: prev[chip.key].filter(
                      (v: string) => v !== chip.value
                    ),
                  }))
                }}
              >
                ‚úï
              </button>
            </Badge>
          ))}
        </div>
      )}

      {/* Recent activity hint */}
      <div className="text-center mt-8 text-sm text-muted-foreground">
        <p>Your recent chats and documents are available in the sidebar</p>
      </div>
    </div>
  )
}

// Extend Window interface for speech recognition
declare global {
  interface Window {
    webkitSpeechRecognition: new () => SpeechRecognition
    SpeechRecognition: new () => SpeechRecognition
  }
}

interface SpeechRecognition extends EventTarget {
  continuous: boolean
  interimResults: boolean
  lang: string
  onstart: (() => void) | null
  onresult: ((event: SpeechRecognitionEvent) => void) | null
  onerror: (() => void) | null
  onend: (() => void) | null
  start(): void
  stop(): void
}

interface SpeechRecognitionEvent extends Event {
  results: SpeechRecognitionResultList
}

interface SpeechRecognitionResultList {
  [index: number]: SpeechRecognitionResult
  length: number
}

interface SpeechRecognitionResult {
  [index: number]: SpeechRecognitionAlternative
  isFinal: boolean
  length: number
}

interface SpeechRecognitionAlternative {
  transcript: string
  confidence: number
}
